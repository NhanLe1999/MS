import org.gradle.internal.os.OperatingSystem

apply plugin: 'com.android.application'

apply plugin: 'com.google.gms.google-services'  // Google Play services Gradle plugin

apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()
    //buildToolsVersion "26.0.1"

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        multiDexEnabled true
        flavorDimensions "main"
        resConfigs "en", "fr", "vi"
        productFlavors {
            en {
                applicationId "com.earlystart.android.monkeyjunior.story"
                versionCode 38600000
                versionName "3.8.6"
                resValue "string","app_name", "Monkey Stories"
                resValue "string", "facebook_app_id", "520137134992261"
                resValue "string", "FacebookContentProvider", "com.facebook.app.FacebookContentProvider520137134992261"
                resValue "string", "ak_login_protocol_scheme", "ak520137134992261"
                resValue "string", "fb_login_protocol_scheme", "fb520137134992261"
                resValue "string","GOOGLE_SERVER_CLIENT_ID", "518533842801-lu80s0fntoma1kns3q82s880eohe7phl.apps.googleusercontent.com"
                resValue "string", "GOOGLE_SECRET", "RbpuF1Z60aRI4l-yL1PmylkL"
                resValue "string", "CLEVER_TAP_ID", "W46-6KK-685Z"
                resValue "string", "CLEVER_TAP_TOKEN", "336-640"
                resValue "string", "CLEVER_SENDER_ID", "id:518533842801"
                resValue "string", "facebook_client_token", "798e11b5f2d2d3ff8e6216d914e4b353"
                /*  manifestPlaceholders = [
                          //onesignal_app_id: '7c61bb0b-11d3-4ad9-b53d-ef993149a2a4',//
                          // Project number pulled from dashboard, local value is ignored.
                          //onesignal_google_project_number: firebase_cpp_sdk_6_16'/REMOTE'//REMOTE'
                  ]*/
            }

            vi {
                applicationId "com.earlystart.android.monkeyjunior.story.vn"
                versionCode 1062000
                versionName "1.6.2"
                resValue "string","app_name", "VMonkey"
                resValue "string","facebook_app_id", "" +
                        "1157923674360984"
                resValue "string", "FacebookContentProvider", "com.facebook.app.FacebookContentProvider1157923674360984"
                resValue "string", "ak_login_protocol_scheme", "ak1157923674360984"
                resValue "string", "fb_login_protocol_scheme", "fb1157923674360984"
                resValue "string","GOOGLE_SERVER_CLIENT_ID", "903853614382-t2ej1rhshogjtf7ks1rcav5b54ovvd6k.apps.googleusercontent.com"
                resValue "string", "GOOGLE_SECRET", "8K_NTICKdEqYVFotWYSES4vK"
                resValue "string", "CLEVER_TAP_ID", "RZ9-W5K-785Z"
                resValue "string", "CLEVER_TAP_TOKEN", "350-c12"
                resValue "string", "CLEVER_SENDER_ID", "id:903853614382"
            }
        }

        externalNativeBuild {
            if (PROP_BUILD_TYPE == 'ndk-build') {
                ndkBuild {
                    targets 'MyGame'
                    arguments 'NDK_TOOLCHAIN_VERSION=clang'
                    arguments '-j' + Runtime.runtime.availableProcessors()

                    def module_paths = [project.file("../../cocos2d").absolutePath,
                                        project.file("../../cocos2d/cocos").absolutePath,

                                        project.file("../../cocos2d/external").absolutePath]
                    if (OperatingSystem.current().isWindows()) {
                        module_paths = module_paths.collect {it.replaceAll('\\\\', '/')}
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    }
                    else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }
                }
            }
            else if (PROP_BUILD_TYPE == 'cmake') {
                cmake {
                    targets 'MyGame'
                    arguments "-DCMAKE_FIND_ROOT_PATH=", "-DANDROID_STL=c++_static", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_NEON=TRUE"
                    cppFlags "-frtti -fexceptions -fsigned-char"
                }
            }
        }

        ndk {
            abiFilters = []
            abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
        }
    }

    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "../../Resources"
        jniLibs.srcDir "jni/safejni"
    }

    externalNativeBuild {
        if (PROP_BUILD_TYPE == 'ndk-build') {
            ndkBuild {
                path "jni/Android.mk"
            }
        }
        else if (PROP_BUILD_TYPE == 'cmake') {
            cmake {
                path "../../CMakeLists.txt"
            }
        }
    }

    signingConfigs {
//        config {
//            keyAlias 'mykey'
//            keyPassword 'edu123'
//            storeFile file('/Users/admin/Desktop/Mj game/provisionProfile/Edu.keystore')
//            storePassword 'abc123'
//        }

        release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles file("$gradle.firebase_cpp_sdk_dir/libs/android/app.pro")
            proguardFiles file("$gradle.firebase_cpp_sdk_dir/libs/android/analytics.pro")
            proguardFiles file("$gradle.firebase_cpp_sdk_dir/libs/android/dynamic_links.pro")
            proguardFiles file("$gradle.firebase_cpp_sdk_dir/libs/android/messaging.pro")
            proguardFiles file("$gradle.firebase_cpp_sdk_dir/libs/android/remote_config.pro")
            proguardFiles file("$gradle.firebase_cpp_sdk_dir/libs/android/auth.pro")
            proguardFiles file("$gradle.firebase_cpp_sdk_dir/libs/android/database.pro")
            proguardFiles file("$gradle.firebase_cpp_sdk_dir/libs/android/firestore.pro")
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
            firebaseCrashlytics {

                nativeSymbolUploadEnabled true
            }

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }

            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    def date = new Date();
                    def formattedDate = date.format('HHmmssddMMyyyy')
                    outputFileName = "MonkeyStories-${variant.versionName}-${variant.versionCode}-"+formattedDate+"-${variant.name}.apk"
                }
            }
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            minifyEnabled false
            shrinkResources false
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    def date = new Date();
                    def formattedDate = date.format('HHmmssddMMyyyy')
                    outputFileName = "MonkeyStories-${variant.versionName}-${variant.versionCode}-"+formattedDate+"-${variant.name}.apk"
                }
            }
        }
    }
    ndkVersion '21.4.7075529'
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith("bundle")) {
        def renameTaskName = "rename${task.name.capitalize()}Aab"
        def flavor = task.name.substring("bundle".length()).uncapitalize()

        println "renameTaskName: ${renameTaskName}"
        println "flavor: ${flavor}"

        if( flavor  == 'release') {

            tasks.create(renameTaskName, Copy) {
                def date = new Date();
                def formattedDate = date.format('HHmmssddMMyyyy')
                def path = "${buildDir}/outputs/bundle/enRelease/"
                from(path)
                include "stories-en-${flavor}.aab"

                def aabFile = "stories-en-${flavor}.aab"

                println "path: ${path}"
                println "aabFile: ${aabFile}"

                def versionName = android.defaultConfig.versionName
                def versionCode = android.defaultConfig.versionCode

                android.applicationVariants.all { variant ->
                    variant.outputs.all {
                        versionName = "${variant.versionName}"
                        versionCode = "${variant.versionCode}"
                    }
                }
                println "versionName: ${versionName}"
                println "versionCode: ${versionCode}"

                destinationDir file("${buildDir}/outputs/renamedBundle/")
                rename "${aabFile}", "MonkeyStories-"+ versionName + "-" + versionCode +"-"+ formattedDate + ".aab"
            }

            task.finalizedBy(renameTaskName)
        }

    }
}

android.applicationVariants.all { variant ->

//    delete "${projectDir}/assets"
    def targetName = variant.name.capitalize()
    def copyTaskName = "copy${targetName}ResourcesToAssets"
    tasks.register(copyTaskName) {
        copy {
            from "${projectDir}/../../Resources"
            into "${projectDir}/assets"
            exclude "**/*.gz"
        }
    }
    tasks.getByName("pre${targetName}Build").dependsOn copyTaskName
}

android.defaultConfig.externalNativeBuild.cmake {
    arguments "-DFIREBASE_CPP_SDK_DIR=$gradle.firebase_cpp_sdk_dir"
}

apply from: "$gradle.firebase_cpp_sdk_dir/Android/firebase_dependencies.gradle"
firebaseCpp.dependencies {
    analytics
    messaging
    dynamicLinks
    remoteConfig
    app
    auth
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':libcocos2dx')
    implementation 'com.mixpanel.android:mixpanel-android:5.6.3'
    implementation 'com.appsflyer:af-android-sdk:6.3.2'
    implementation 'com.android.support:multidex:2.0.1'

    //qrcode.
    implementation 'com.github.nisrulz:qreader:2.1.2'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'//https://github.com/nisrulz/qreader/issues/48

    implementation 'com.facebook.device.yearclass:yearclass:2.1.0'
    implementation 'com.facebook.android:facebook-login:latest.release'
    implementation 'com.google.android.exoplayer:exoplayer:2.18.2' // from the documentation
    implementation 'com.google.android.exoplayer:exoplayer-hls:2.18.2' // from the documentation
    implementation 'com.google.android.exoplayer:exoplayer-ui:2.18.2'
    implementation 'com.google.android.exoplayer:exoplayer-core:2.18.2'
    implementation 'com.google.android.exoplayer:extension-mediasession:2.18.2'

    implementation 'io.hypertrack:smart-scheduler:0.0.13'
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation('com.google.firebase:firebase-analytics:19.0.2') {
        exclude module: "play-services-ads-identifier:17.0.0"
    }
   // implementation 'com.google.firebase:firebase-analytics:19.0.2'
    implementation 'com.google.firebase:firebase-auth:21.0.1'
    implementation 'com.google.firebase:firebase-dynamic-links:20.1.1'
    implementation 'com.google.firebase:firebase-database:20.0.2'
    implementation 'com.google.firebase:firebase-messaging:22.0.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.3.1'
    implementation 'com.google.firebase:firebase-firestore:23.0.4'

    implementation 'com.squareup.okhttp:okhttp:2.6.0'

    //screen recoder
    implementation 'com.github.HBiSoft:HBRecorder:3.0.1'

    //clear tap
    implementation 'com.clevertap.android:clevertap-android-sdk:4.4.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.installreferrer:installreferrer:1.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'//MANDATORY for App Inbox
    implementation 'com.android.support:design:28.0.0'//MANDATORY for App Inbox
    implementation 'com.github.bumptech.glide:glide:4.9.0'//MANDATORY for App Inbox
    implementation 'com.google.code.gson:gson:2.8.6'

    implementation 'com.google.android.gms:play-services-base:16.0.1'
    implementation 'com.google.android.gms:play-services-auth:19.0.0'
    implementation 'com.google.android.gms:play-services-gcm:16.1.0'
    implementation 'androidx.work:work-runtime-ktx:2.7.0-alpha05'


    //MANDATORY for App Inbox
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.viewpager:viewpager:1.0.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation 'com.android.billingclient:billing:5.2.0'
    implementation "com.google.android.gms:play-services-auth-api-phone:16.0.0"
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'commons-io:commons-io:2.1'
}